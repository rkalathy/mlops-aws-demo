name: Data Drift Monitoring

on:
  schedule:
    # Run every day at 2 AM UTC
    # - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      drift_type:
        description: 'Type of drift to simulate for testing'
        required: false
        default: 'none'
        type: choice
        options:
          - none
          - covariate
          - concept
      drift_magnitude:
        description: 'Magnitude of drift (0.0 to 1.0)'
        required: false
        default: '0.0'
        type: string
      reference_data_path:
        description: 'S3 path to reference data (optional)'
        required: false
        type: string

env:
  AWS_DEFAULT_REGION: eu-west-2
  SAGEMAKER_ROLE_ARN: ${{ secrets.SAGEMAKER_ROLE_ARN }}
  S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}

jobs:
  drift-monitoring:
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write
      contents: read
    
    outputs:
      drift-detected: ${{ steps.monitor-drift.outputs.drift-detected }}
      drift-status: ${{ steps.monitor-drift.outputs.drift-status }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install scipy  # Additional dependency for drift monitoring
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    
    - name: Run Data Drift Monitoring
      id: monitor-drift
      run: |
        echo "Running data drift monitoring..."
        
        # Set default values for manual triggers
        DRIFT_TYPE="${{ github.event.inputs.drift_type || 'none' }}"
        DRIFT_MAGNITUDE="${{ github.event.inputs.drift_magnitude || '0.0' }}"
        REFERENCE_DATA_PATH="${{ github.event.inputs.reference_data_path }}"
        
        # Build command
        CMD="python data_drift_monitor.py --drift-type $DRIFT_TYPE --drift-magnitude $DRIFT_MAGNITUDE"
        if [ -n "$REFERENCE_DATA_PATH" ]; then
          CMD="$CMD --reference-data-path $REFERENCE_DATA_PATH"
        fi
        
        echo "Command: $CMD"
        
        # Run drift monitoring and capture exit code
        if $CMD; then
          echo "drift-detected=false" >> $GITHUB_OUTPUT
          echo "drift-status=NO_DRIFT" >> $GITHUB_OUTPUT
          echo "âœ… No drift detected"
        else
          echo "drift-detected=true" >> $GITHUB_OUTPUT
          echo "drift-status=DRIFT_DETECTED" >> $GITHUB_OUTPUT
          echo "ðŸš¨ Data drift detected!"
        fi
    
    - name: Upload MLflow Artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: drift-monitoring-mlflow
        path: |
          mlruns/
        retention-days: 30
        if-no-files-found: warn
    
    - name: Upload Drift Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: drift-reports
        path: |
          *.json
          *.log
        retention-days: 7
        if-no-files-found: warn
    
    - name: Drift Monitoring Summary
      if: always()
      run: |
        echo "## ðŸ“Š Data Drift Monitoring Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "- **Drift Status**: ${{ steps.monitor-drift.outputs.drift-status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Drift Detected**: ${{ steps.monitor-drift.outputs.drift-detected }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Test Configuration**:" >> $GITHUB_STEP_SUMMARY
        echo "  - Drift Type: ${{ github.event.inputs.drift_type || 'none' }}" >> $GITHUB_STEP_SUMMARY
        echo "  - Drift Magnitude: ${{ github.event.inputs.drift_magnitude || '0.0' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.monitor-drift.outputs.drift-detected }}" = "true" ]; then
          echo "### ðŸš¨ Action Required" >> $GITHUB_STEP_SUMMARY
          echo "Data drift has been detected. Consider the following actions:" >> $GITHUB_STEP_SUMMARY
          echo "- Review the detailed drift report in artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Investigate potential causes of drift" >> $GITHUB_STEP_SUMMARY
          echo "- Consider retraining the model with recent data" >> $GITHUB_STEP_SUMMARY
          echo "- Update feature engineering if needed" >> $GITHUB_STEP_SUMMARY
        else
          echo "### âœ… No Action Required" >> $GITHUB_STEP_SUMMARY
          echo "No significant data drift detected. Continue monitoring." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“¦ Available Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- **drift-monitoring-mlflow**: MLflow experiment tracking data" >> $GITHUB_STEP_SUMMARY
        echo "- **drift-reports**: Detailed drift analysis reports" >> $GITHUB_STEP_SUMMARY

  alert-on-drift:
    needs: drift-monitoring
    runs-on: ubuntu-latest
    if: needs.drift-monitoring.outputs.drift-detected == 'true'
    
    steps:
    - name: Create GitHub Issue for Drift Alert
      uses: actions/github-script@v7
      with:
        script: |
          const title = `ðŸš¨ Data Drift Detected - ${new Date().toISOString().split('T')[0]}`;
          const body = `
          ## Data Drift Alert
          
          **Timestamp**: ${new Date().toUTCString()}
          **Status**: ${{ needs.drift-monitoring.outputs.drift-status }}
          **Workflow Run**: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ### Summary
          Data drift has been detected in the MLOps pipeline. This indicates that the current data distribution differs significantly from the training data distribution.
          
          ### Recommended Actions
          - [ ] Review detailed drift reports in workflow artifacts
          - [ ] Investigate potential root causes
          - [ ] Consider model retraining with recent data
          - [ ] Update data preprocessing if needed
          - [ ] Review feature engineering pipeline
          
          ### Artifacts
          - Download drift monitoring artifacts from the workflow run
          - Check MLflow tracking for detailed metrics
          
          ---
          *This issue was automatically created by the Data Drift Monitoring workflow*
          `;
          
          // Check if a similar issue already exists
          const existingIssues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['data-drift', 'automated'],
            state: 'open'
          });
          
          const today = new Date().toISOString().split('T')[0];
          const existingTodayIssue = existingIssues.data.find(issue => 
            issue.title.includes(today)
          );
          
          if (!existingTodayIssue) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['data-drift', 'automated', 'needs-investigation']
            });
            console.log('Created drift alert issue');
          } else {
            console.log('Drift issue for today already exists, skipping creation');
          }
    
    - name: Send Slack Notification (Optional)
      if: env.SLACK_WEBHOOK_URL != ''
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{
          "text": "ðŸš¨ Data Drift Detected",
          "blocks": [
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "*Data Drift Alert*\n\nData drift has been detected in the MLOps pipeline.\n\n*Workflow*: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>\n*Status*: ${{ needs.drift-monitoring.outputs.drift-status }}\n*Time*: $(date -u)"
              }
            }
          ]
        }' \
        $SLACK_WEBHOOK_URL || echo "Slack notification failed (webhook not configured)"

  weekly-drift-summary:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    needs: drift-monitoring
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    
    - name: Generate Weekly Drift Summary
      run: |
        echo "## ðŸ“ˆ Weekly Data Drift Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Week of**: $(date -u '+%Y-%m-%d')" >> $GITHUB_STEP_SUMMARY
        echo "- **Latest Status**: ${{ needs.drift-monitoring.outputs.drift-status }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Recent Drift Reports" >> $GITHUB_STEP_SUMMARY
        echo "Check S3 bucket \`${{ env.S3_BUCKET_NAME }}/drift-monitoring/\` for detailed reports" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Monitoring Health" >> $GITHUB_STEP_SUMMARY
        echo "- Drift monitoring is running daily at 2 AM UTC" >> $GITHUB_STEP_SUMMARY
        echo "- Reports are automatically stored in S3 and MLflow" >> $GITHUB_STEP_SUMMARY
        echo "- Alerts are created for detected drift" >> $GITHUB_STEP_SUMMARY
